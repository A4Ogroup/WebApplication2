// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2.Models;

#nullable disable

namespace WebApplication2.Migrations
{
    [DbContext(typeof(LconsultDBContext))]
    [Migration("20240408205043_nnnn")]
    partial class nnnn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("UserInterest", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("studentID");

                    b.Property<int>("SubId")
                        .HasColumnType("int")
                        .HasColumnName("subID");

                    b.HasKey("StudentId", "SubId");

                    b.HasIndex("SubId");

                    b.ToTable("UserInterests", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Category", b =>
                {
                    b.Property<byte>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("categoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("categoryName");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("courseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<string>("AddedByUserId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime?>("AddingDate")
                        .HasColumnType("date")
                        .HasColumnName("addingDate");

                    b.Property<int?>("AverageRating")
                        .HasColumnType("int")
                        .HasColumnName("averageRating");

                    b.Property<byte?>("CategoryId")
                        .HasColumnType("tinyint")
                        .HasColumnName("categoryID");

                    b.Property<bool?>("Claimed")
                        .HasColumnType("bit")
                        .HasColumnName("claimed");

                    b.Property<string>("CourseDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("courseDescription");

                    b.Property<int?>("CourseDuration")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("courseDuration");

                    b.Property<string>("InstructorFullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("instructorFullName");

                    b.Property<string>("InstructorId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("instructorID");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("languageID");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("date")
                        .HasColumnName("lastUpdate");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("picture");

                    b.Property<string>("Platform")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("platform");

                    b.Property<bool?>("PriceStatus")
                        .HasColumnType("bit")
                        .HasColumnName("priceStatus");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int?>("SubcategoryId")
                        .HasColumnType("int")
                        .HasColumnName("subcategoryID");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicsCovered")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("topicsCovered");

                    b.Property<int?>("VedioLenght")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("vedioLenght");

                    b.HasKey("CourseId");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Instructor", b =>
                {
                    b.Property<string>("InstructorId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("instructorID");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("about");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("countryCode");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("Profession")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("profession");

                    b.Property<byte?>("YearsExperince")
                        .HasColumnType("tinyint")
                        .HasColumnName("yearsExperince");

                    b.HasKey("InstructorId");

                    b.ToTable("Instructor", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("languageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("LanguageId");

                    b.ToTable("Language", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reportID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"), 1L, 1);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("reviewID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("StudentId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("studentID");

                    b.HasKey("ReportId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("StudentId");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseID");

                    b.Property<string>("Descritipn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Rate")
                        .HasColumnType("tinyint")
                        .HasColumnName("rate");

                    b.Property<DateTime?>("RatingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ratingDate");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("StudentId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("studentID");

                    b.HasKey("ReviewId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.SocialMediaAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("accountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<string>("Account")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("account");

                    b.Property<string>("InstructorId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("instructorID");

                    b.HasKey("AccountId");

                    b.HasIndex("InstructorId");

                    b.ToTable("SocialMediaAccount", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("studentID");

                    b.Property<byte?>("ContributionNum")
                        .HasColumnType("tinyint")
                        .HasColumnName("contributionNum");

                    b.HasKey("StudentId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.SubCategory", b =>
                {
                    b.Property<int>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("subID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubId"), 1L, 1);

                    b.Property<byte>("CategoryId")
                        .HasColumnType("tinyint")
                        .HasColumnName("categoryID");

                    b.Property<string>("SubName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("subName");

                    b.HasKey("SubId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategory", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("userID");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lastName");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Pic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pic");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("registerDate");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<byte?>("UserType")
                        .HasColumnType("tinyint")
                        .HasColumnName("userType");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("UserInterest", b =>
                {
                    b.HasOne("WebApplication2.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_UserInterests_Student");

                    b.HasOne("WebApplication2.Models.SubCategory", null)
                        .WithMany()
                        .HasForeignKey("SubId")
                        .IsRequired()
                        .HasConstraintName("FK_UserInterests_SubCategory");
                });

            modelBuilder.Entity("WebApplication2.Models.Course", b =>
                {
                    b.HasOne("WebApplication2.Models.User", "AddedByUser")
                        .WithMany("Courses")
                        .HasForeignKey("AddedByUserId");

                    b.HasOne("WebApplication2.Models.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK_Course_User_InstructroID");

                    b.HasOne("WebApplication2.Models.Language", "Language")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Course_Language");

                    b.HasOne("WebApplication2.Models.SubCategory", "Subcategory")
                        .WithMany("Courses")
                        .HasForeignKey("SubcategoryId")
                        .HasConstraintName("FK_Course_SubCategory");

                    b.Navigation("AddedByUser");

                    b.Navigation("Instructor");

                    b.Navigation("Language");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("WebApplication2.Models.Instructor", b =>
                {
                    b.HasOne("WebApplication2.Models.User", "InstructorNavigation")
                        .WithOne("Instructor")
                        .HasForeignKey("WebApplication2.Models.Instructor", "InstructorId")
                        .IsRequired()
                        .HasConstraintName("FK_Instructor_User");

                    b.Navigation("InstructorNavigation");
                });

            modelBuilder.Entity("WebApplication2.Models.Report", b =>
                {
                    b.HasOne("WebApplication2.Models.Review", "Review")
                        .WithMany("Reports")
                        .HasForeignKey("ReviewId")
                        .HasConstraintName("FK_Report_Review");

                    b.HasOne("WebApplication2.Models.Student", "Student")
                        .WithMany("Reports")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Report_Student");

                    b.Navigation("Review");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("WebApplication2.Models.Review", b =>
                {
                    b.HasOne("WebApplication2.Models.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Review_Course");

                    b.HasOne("WebApplication2.Models.Student", "Student")
                        .WithMany("Reviews")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Review_Student");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("WebApplication2.Models.SocialMediaAccount", b =>
                {
                    b.HasOne("WebApplication2.Models.Instructor", "Instructor")
                        .WithMany("SocialMediaAccounts")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK_SocialMediaAccount_Instructor");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("WebApplication2.Models.Student", b =>
                {
                    b.HasOne("WebApplication2.Models.User", "StudentNavigation")
                        .WithOne("Student")
                        .HasForeignKey("WebApplication2.Models.Student", "StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Student_User");

                    b.Navigation("StudentNavigation");
                });

            modelBuilder.Entity("WebApplication2.Models.SubCategory", b =>
                {
                    b.HasOne("WebApplication2.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_SubCategory_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebApplication2.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("WebApplication2.Models.Course", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("WebApplication2.Models.Instructor", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("SocialMediaAccounts");
                });

            modelBuilder.Entity("WebApplication2.Models.Language", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("WebApplication2.Models.Review", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("WebApplication2.Models.Student", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("WebApplication2.Models.SubCategory", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("WebApplication2.Models.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Instructor");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
