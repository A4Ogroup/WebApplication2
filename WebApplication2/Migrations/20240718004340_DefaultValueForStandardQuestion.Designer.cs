// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2.Models;

#nullable disable

namespace WebApplication2.Migrations
{
    [DbContext(typeof(LconsultDBContext))]
    [Migration("20240718004340_DefaultValueForStandardQuestion")]
    partial class DefaultValueForStandardQuestion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Category", b =>
                {
                    b.Property<byte>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("categoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("categoryName");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("courseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<string>("AddedByUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddingDate")
                        .HasColumnType("date")
                        .HasColumnName("addingDate");

                    b.Property<double?>("AverageContentQuality")
                        .HasColumnType("float");

                    b.Property<double?>("AverageEngagementLevel")
                        .HasColumnType("float");

                    b.Property<double?>("AverageMaterialQuality")
                        .HasColumnType("float");

                    b.Property<double?>("AverageOverallSatisfaction")
                        .HasColumnType("float");

                    b.Property<double?>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0)
                        .HasColumnName("averageRating");

                    b.Property<double?>("AverageSupportQuality")
                        .HasColumnType("float");

                    b.Property<double?>("AverageTechnicalQuality")
                        .HasColumnType("float");

                    b.Property<byte?>("CategoryId")
                        .HasColumnType("tinyint")
                        .HasColumnName("categoryID");

                    b.Property<bool?>("Claimed")
                        .HasColumnType("bit")
                        .HasColumnName("claimed");

                    b.Property<string>("CourseDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("courseDescription");

                    b.Property<int?>("CourseDuration")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("courseDuration");

                    b.Property<string>("InstructorFullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("instructorFullName");

                    b.Property<string>("InstructorId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("instructorID");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("languageID");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("date")
                        .HasColumnName("lastUpdate");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("picture");

                    b.Property<string>("Platform")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("platform");

                    b.Property<bool?>("PriceStatus")
                        .HasColumnType("bit")
                        .HasColumnName("priceStatus");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int?>("SubcategoryId")
                        .HasColumnType("int")
                        .HasColumnName("subcategoryID");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopicsCovered")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("topicsCovered");

                    b.Property<int?>("VedioLength")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("vedioLength");

                    b.HasKey("CourseId");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Instructor", b =>
                {
                    b.Property<string>("InstructorId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("instructorID");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("about");

                    b.Property<string>("Profession")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("profession");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("YearsExperince")
                        .HasColumnType("tinyint")
                        .HasColumnName("yearsExperince");

                    b.HasKey("InstructorId");

                    b.ToTable("Instructor", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("languageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("LanguageId");

                    b.ToTable("Language", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reportID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"), 1L, 1);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("reviewID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("studentID");

                    b.HasKey("ReportId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("StudentId");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<int>("ContentQuality")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("courseID");

                    b.Property<string>("Descritipn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EngagementLevel")
                        .HasColumnType("int");

                    b.Property<int>("MaterialQuality")
                        .HasColumnType("int");

                    b.Property<int>("OverAllSatisfication")
                        .HasColumnType("int");

                    b.Property<byte>("Rate")
                        .HasColumnType("tinyint")
                        .HasColumnName("rate");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ratingDate");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("studentID");

                    b.Property<int>("SupportQuality")
                        .HasColumnType("int");

                    b.Property<int>("TechnicalQuality")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.SocialMediaAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("accountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<string>("Account")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("account");

                    b.Property<string>("InstructorId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("instructorID");

                    b.HasKey("AccountId");

                    b.HasIndex("InstructorId");

                    b.ToTable("SocialMediaAccount", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("studentID");

                    b.Property<byte>("ContributionNum")
                        .HasColumnType("tinyint")
                        .HasColumnName("contributionNum");

                    b.HasKey("StudentId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.SubCategory", b =>
                {
                    b.Property<int>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("subID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubId"), 1L, 1);

                    b.Property<byte>("CategoryId")
                        .HasColumnType("tinyint")
                        .HasColumnName("categoryID");

                    b.Property<string>("SubName")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("subName");

                    b.HasKey("SubId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategory", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("WebApplication2.Models.UserInterests", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SubId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "SubId");

                    b.HasIndex("SubId");

                    b.ToTable("UserInterests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplication2.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplication2.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplication2.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Models.Course", b =>
                {
                    b.HasOne("WebApplication2.Models.User", "AddedByUser")
                        .WithMany("Courses")
                        .HasForeignKey("AddedByUserId");

                    b.HasOne("WebApplication2.Models.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK_Course_User_InstructroID");

                    b.HasOne("WebApplication2.Models.Language", "Language")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Course_Language");

                    b.HasOne("WebApplication2.Models.SubCategory", "Subcategory")
                        .WithMany("Courses")
                        .HasForeignKey("SubcategoryId")
                        .HasConstraintName("FK_Course_SubCategory");

                    b.Navigation("AddedByUser");

                    b.Navigation("Instructor");

                    b.Navigation("Language");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("WebApplication2.Models.Instructor", b =>
                {
                    b.HasOne("WebApplication2.Models.User", "InstructorNavigation")
                        .WithOne("Instructor")
                        .HasForeignKey("WebApplication2.Models.Instructor", "InstructorId")
                        .IsRequired()
                        .HasConstraintName("FK_Instructor_User");

                    b.Navigation("InstructorNavigation");
                });

            modelBuilder.Entity("WebApplication2.Models.Report", b =>
                {
                    b.HasOne("WebApplication2.Models.Review", "Review")
                        .WithMany("Reports")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Report_Review");

                    b.HasOne("WebApplication2.Models.Student", "Student")
                        .WithMany("Reports")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Report_Student");

                    b.Navigation("Review");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("WebApplication2.Models.Review", b =>
                {
                    b.HasOne("WebApplication2.Models.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Review_Course");

                    b.HasOne("WebApplication2.Models.Student", "Student")
                        .WithMany("Reviews")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Review_Student");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("WebApplication2.Models.SocialMediaAccount", b =>
                {
                    b.HasOne("WebApplication2.Models.Instructor", "Instructor")
                        .WithMany("SocialMediaAccounts")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK_SocialMediaAccount_Instructor");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("WebApplication2.Models.Student", b =>
                {
                    b.HasOne("WebApplication2.Models.User", "StudentNavigation")
                        .WithOne("Student")
                        .HasForeignKey("WebApplication2.Models.Student", "StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Student_User");

                    b.Navigation("StudentNavigation");
                });

            modelBuilder.Entity("WebApplication2.Models.SubCategory", b =>
                {
                    b.HasOne("WebApplication2.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_SubCategory_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebApplication2.Models.UserInterests", b =>
                {
                    b.HasOne("WebApplication2.Models.Student", "Student")
                        .WithMany("UserInterests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.SubCategory", "SubCategory")
                        .WithMany("UserInterests")
                        .HasForeignKey("SubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("WebApplication2.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("WebApplication2.Models.Course", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("WebApplication2.Models.Instructor", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("SocialMediaAccounts");
                });

            modelBuilder.Entity("WebApplication2.Models.Language", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("WebApplication2.Models.Review", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("WebApplication2.Models.Student", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Reviews");

                    b.Navigation("UserInterests");
                });

            modelBuilder.Entity("WebApplication2.Models.SubCategory", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("UserInterests");
                });

            modelBuilder.Entity("WebApplication2.Models.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Instructor");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
